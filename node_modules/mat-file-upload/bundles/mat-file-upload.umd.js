(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/button'), require('@angular/common'), require('@angular/material/icon'), require('@angular/forms'), require('@angular/material/input'), require('@angular/material/select')) :
    typeof define === 'function' && define.amd ? define('mat-file-upload', ['exports', '@angular/core', '@angular/material/button', '@angular/common', '@angular/material/icon', '@angular/forms', '@angular/material/input', '@angular/material/select'], factory) :
    (global = global || self, factory(global['mat-file-upload'] = {}, global.ng.core, global.ng.material.button, global.ng.common, global.ng.material.icon, global.ng.forms, global.ng.material.input, global.ng.material.select));
}(this, (function (exports, core, button, common, icon, forms, input, select) { 'use strict';

    var MatFileUploadService = /** @class */ (function () {
        function MatFileUploadService() {
        }
        MatFileUploadService.ɵfac = function MatFileUploadService_Factory(t) { return new (t || MatFileUploadService)(); };
        MatFileUploadService.ɵprov = core.ɵɵdefineInjectable({ token: MatFileUploadService, factory: MatFileUploadService.ɵfac, providedIn: 'root' });
        return MatFileUploadService;
    }());
    /*@__PURE__*/ (function () { core.ɵsetClassMetadata(MatFileUploadService, [{
            type: core.Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return []; }, null); })();

    var _c0 = ["fileInput"];
    function MatFileUploadComponent_button_7_Template(rf, ctx) { if (rf & 1) {
        var _r4 = core.ɵɵgetCurrentView();
        core.ɵɵelementStart(0, "button", 6);
        core.ɵɵlistener("click", function MatFileUploadComponent_button_7_Template_button_click_0_listener() { core.ɵɵrestoreView(_r4); var ctx_r3 = core.ɵɵnextContext(); return ctx_r3.uploadFiles(); });
        core.ɵɵtext(1);
        core.ɵɵelementEnd();
    } if (rf & 2) {
        var ctx_r1 = core.ɵɵnextContext();
        core.ɵɵproperty("type", ctx_r1.uploadButtonType)("disabled", !ctx_r1.selectedFiles);
        core.ɵɵattribute("aria-label", ctx_r1.uploadButtonText);
        core.ɵɵadvance(1);
        core.ɵɵtextInterpolate1(" ", ctx_r1.uploadButtonText, " ");
    } }
    function MatFileUploadComponent_button_10_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
        core.ɵɵelementStart(0, "mat-icon");
        core.ɵɵtext(1, "close");
        core.ɵɵelementEnd();
    } }
    function MatFileUploadComponent_button_10_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
        core.ɵɵelement(0, "mat-icon", 10);
    } if (rf & 2) {
        var ctx_r6 = core.ɵɵnextContext(2);
        core.ɵɵproperty("svgIcon", ctx_r6.customSvgIcon);
    } }
    function MatFileUploadComponent_button_10_Template(rf, ctx) { if (rf & 1) {
        var _r8 = core.ɵɵgetCurrentView();
        core.ɵɵelementStart(0, "button", 7);
        core.ɵɵlistener("click", function MatFileUploadComponent_button_10_Template_button_click_0_listener() { core.ɵɵrestoreView(_r8); var ctx_r7 = core.ɵɵnextContext(); return ctx_r7.filesChanged(null); });
        core.ɵɵtemplate(1, MatFileUploadComponent_button_10_mat_icon_1_Template, 2, 0, "mat-icon", 8);
        core.ɵɵtemplate(2, MatFileUploadComponent_button_10_mat_icon_2_Template, 1, 1, "mat-icon", 9);
        core.ɵɵelementEnd();
    } if (rf & 2) {
        var ctx_r2 = core.ɵɵnextContext();
        core.ɵɵadvance(1);
        core.ɵɵproperty("ngIf", !ctx_r2.customSvgIcon);
        core.ɵɵadvance(1);
        core.ɵɵproperty("ngIf", ctx_r2.customSvgIcon);
    } }
    var MatFileUploadComponent = /** @class */ (function () {
        function MatFileUploadComponent() {
            this.labelText = 'Select File(s)';
            this.selectButtonText = 'Select File(s)';
            this.selectFilesButtonType = 'button';
            this.uploadButtonText = 'Upload File(s)';
            this.uploadButtonType = 'button';
            this.allowMultipleFiles = false;
            this.showUploadButton = true;
            this.acceptedTypes = '*.*';
            this.customSvgIcon = null;
            this.uploadClicked = new core.EventEmitter();
            this.selectedFilesChanged = new core.EventEmitter();
            this.selectedFileText = '';
        }
        MatFileUploadComponent.prototype.filesChanged = function (files) {
            this.selectedFiles = files;
            this.selectedFilesChanged.emit(this.selectedFiles);
            if (this.selectedFiles) {
                var numSelectedFiles = this.selectedFiles.length;
                this.selectedFileText =
                    numSelectedFiles === 1
                        ? this.selectedFiles[0].name
                        : numSelectedFiles + " files selected";
            }
            else {
                this.selectedFileText = '';
                this.resetFileInput();
            }
        };
        MatFileUploadComponent.prototype.uploadFiles = function () {
            this.uploadClicked.emit(this.selectedFiles);
            this.resetFileInput();
        };
        MatFileUploadComponent.prototype.resetFileInput = function () {
            this.fileInputRef.nativeElement.value = '';
        };
        MatFileUploadComponent.ɵfac = function MatFileUploadComponent_Factory(t) { return new (t || MatFileUploadComponent)(); };
        MatFileUploadComponent.ɵcmp = core.ɵɵdefineComponent({ type: MatFileUploadComponent, selectors: [["mat-file-upload"]], viewQuery: function MatFileUploadComponent_Query(rf, ctx) { if (rf & 1) {
                core.ɵɵviewQuery(_c0, true);
            } if (rf & 2) {
                var _t;
                core.ɵɵqueryRefresh(_t = core.ɵɵloadQuery()) && (ctx.fileInputRef = _t.first);
            } }, inputs: { labelText: "labelText", selectButtonText: "selectButtonText", selectFilesButtonType: "selectFilesButtonType", uploadButtonText: "uploadButtonText", uploadButtonType: "uploadButtonType", allowMultipleFiles: "allowMultipleFiles", showUploadButton: "showUploadButton", acceptedTypes: "acceptedTypes", customSvgIcon: "customSvgIcon" }, outputs: { uploadClicked: "uploadClicked", selectedFilesChanged: "selectedFilesChanged" }, decls: 11, vars: 9, consts: [[1, "file-input-text"], ["mat-button", "", "color", "primary", 1, "file-input-button", 3, "type", "click"], ["type", "file", 2, "display", "none", 3, "accept", "multiple", "change"], ["fileInput", ""], ["mat-raised-button", "", "color", "primary", "class", "file-input-button", 3, "type", "disabled", "click", 4, "ngIf"], ["mat-icon-button", "", "type", "button", "aria-label", "Remove Selected File(s)", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "color", "primary", 1, "file-input-button", 3, "type", "disabled", "click"], ["mat-icon-button", "", "type", "button", "aria-label", "Remove Selected File(s)", 3, "click"], [4, "ngIf"], [3, "svgIcon", 4, "ngIf"], [3, "svgIcon"]], template: function MatFileUploadComponent_Template(rf, ctx) { if (rf & 1) {
                var _r9 = core.ɵɵgetCurrentView();
                core.ɵɵelementStart(0, "span", 0);
                core.ɵɵtext(1);
                core.ɵɵelementEnd();
                core.ɵɵelementStart(2, "button", 1);
                core.ɵɵlistener("click", function MatFileUploadComponent_Template_button_click_2_listener() { core.ɵɵrestoreView(_r9); var _r0 = core.ɵɵreference(6); return _r0.click(); });
                core.ɵɵelementStart(3, "span");
                core.ɵɵtext(4);
                core.ɵɵelementEnd();
                core.ɵɵelementStart(5, "input", 2, 3);
                core.ɵɵlistener("change", function MatFileUploadComponent_Template_input_change_5_listener($event) { return ctx.filesChanged($event.target.files); });
                core.ɵɵelementEnd();
                core.ɵɵelementEnd();
                core.ɵɵtemplate(7, MatFileUploadComponent_button_7_Template, 2, 4, "button", 4);
                core.ɵɵelementStart(8, "span", 0);
                core.ɵɵtext(9);
                core.ɵɵelementEnd();
                core.ɵɵtemplate(10, MatFileUploadComponent_button_10_Template, 3, 2, "button", 5);
            } if (rf & 2) {
                core.ɵɵadvance(1);
                core.ɵɵtextInterpolate(ctx.labelText);
                core.ɵɵadvance(1);
                core.ɵɵproperty("type", ctx.selectFilesButtonType);
                core.ɵɵattribute("aria-label", ctx.selectButtonText);
                core.ɵɵadvance(2);
                core.ɵɵtextInterpolate(ctx.selectButtonText);
                core.ɵɵadvance(1);
                core.ɵɵproperty("accept", ctx.acceptedTypes)("multiple", ctx.allowMultipleFiles);
                core.ɵɵadvance(2);
                core.ɵɵproperty("ngIf", ctx.showUploadButton);
                core.ɵɵadvance(2);
                core.ɵɵtextInterpolate(ctx.selectedFileText);
                core.ɵɵadvance(1);
                core.ɵɵproperty("ngIf", ctx.selectedFiles != null && ctx.selectedFiles.length > 0);
            } }, directives: [button.MatButton, common.NgIf, icon.MatIcon], styles: [".file-input-button[_ngcontent-%COMP%] { margin-right: 8px !important }", ".file-input-text[_ngcontent-%COMP%] { font-size: 14px !important; margin-right: 8px !important }"] });
        return MatFileUploadComponent;
    }());
    /*@__PURE__*/ (function () { core.ɵsetClassMetadata(MatFileUploadComponent, [{
            type: core.Component,
            args: [{
                    selector: 'mat-file-upload',
                    template: "\n    <span class=\"file-input-text\">{{ labelText }}</span>\n    <button\n      mat-button\n      [type]=\"selectFilesButtonType\"\n      color=\"primary\"\n      class=\"file-input-button\"\n      (click)=\"fileInput.click()\"\n      [attr.aria-label]=\"selectButtonText\"\n    >\n      <span>{{ selectButtonText }}</span>\n      <input\n        #fileInput\n        type=\"file\"\n        style=\"display: none\"\n        [accept]=\"acceptedTypes\"\n        [multiple]=\"allowMultipleFiles\"\n        (change)=\"filesChanged($event.target.files)\"\n      />\n    </button>\n    <button\n      mat-raised-button\n      [type]=\"uploadButtonType\"\n      color=\"primary\"\n      class=\"file-input-button\"\n      [disabled]=\"!selectedFiles\"\n      (click)=\"uploadFiles()\"\n      *ngIf=\"showUploadButton\"\n      [attr.aria-label]=\"uploadButtonText\"\n    >\n      {{ uploadButtonText }}\n    </button>\n    <span class=\"file-input-text\">{{ selectedFileText }}</span>\n    <button\n      mat-icon-button\n      (click)=\"filesChanged(null)\"\n      type=\"button\"\n      aria-label=\"Remove Selected File(s)\"\n       *ngIf=\"selectedFiles != null && selectedFiles.length > 0\"\n    >\n        <mat-icon *ngIf=\"!customSvgIcon\">close</mat-icon>\n        <mat-icon *ngIf=\"customSvgIcon\" [svgIcon]=\"customSvgIcon\"></mat-icon>\n    </button>\n  ",
                    styles: [
                        '.file-input-button { margin-right: 8px !important }',
                        '.file-input-text { font-size: 14px !important; margin-right: 8px !important }',
                    ],
                }]
        }], null, { labelText: [{
                type: core.Input
            }], selectButtonText: [{
                type: core.Input
            }], selectFilesButtonType: [{
                type: core.Input
            }], uploadButtonText: [{
                type: core.Input
            }], uploadButtonType: [{
                type: core.Input
            }], allowMultipleFiles: [{
                type: core.Input
            }], showUploadButton: [{
                type: core.Input
            }], acceptedTypes: [{
                type: core.Input
            }], customSvgIcon: [{
                type: core.Input
            }], uploadClicked: [{
                type: core.Output
            }], selectedFilesChanged: [{
                type: core.Output
            }], fileInputRef: [{
                type: core.ViewChild,
                args: ['fileInput']
            }] }); })();

    var MatFileUploadModule = /** @class */ (function () {
        function MatFileUploadModule() {
        }
        MatFileUploadModule.ɵmod = core.ɵɵdefineNgModule({ type: MatFileUploadModule });
        MatFileUploadModule.ɵinj = core.ɵɵdefineInjector({ factory: function MatFileUploadModule_Factory(t) { return new (t || MatFileUploadModule)(); }, imports: [[
                    common.CommonModule,
                    button.MatButtonModule,
                    icon.MatIconModule,
                    input.MatInputModule,
                    select.MatSelectModule,
                    forms.FormsModule,
                ]] });
        return MatFileUploadModule;
    }());
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && core.ɵɵsetNgModuleScope(MatFileUploadModule, { declarations: [MatFileUploadComponent], imports: [common.CommonModule,
            button.MatButtonModule,
            icon.MatIconModule,
            input.MatInputModule,
            select.MatSelectModule,
            forms.FormsModule], exports: [MatFileUploadComponent] }); })();
    /*@__PURE__*/ (function () { core.ɵsetClassMetadata(MatFileUploadModule, [{
            type: core.NgModule,
            args: [{
                    declarations: [MatFileUploadComponent],
                    imports: [
                        common.CommonModule,
                        button.MatButtonModule,
                        icon.MatIconModule,
                        input.MatInputModule,
                        select.MatSelectModule,
                        forms.FormsModule,
                    ],
                    exports: [MatFileUploadComponent],
                }]
        }], null, null); })();

    exports.MatFileUploadComponent = MatFileUploadComponent;
    exports.MatFileUploadModule = MatFileUploadModule;
    exports.MatFileUploadService = MatFileUploadService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mat-file-upload.umd.js.map
