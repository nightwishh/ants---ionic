import { ɵɵdefineInjectable, ɵsetClassMetadata, Injectable, ɵɵgetCurrentView, ɵɵelementStart, ɵɵlistener, ɵɵrestoreView, ɵɵnextContext, ɵɵtext, ɵɵelementEnd, ɵɵproperty, ɵɵattribute, ɵɵadvance, ɵɵtextInterpolate1, ɵɵelement, ɵɵtemplate, EventEmitter, ɵɵdefineComponent, ɵɵviewQuery, ɵɵqueryRefresh, ɵɵloadQuery, ɵɵreference, ɵɵtextInterpolate, Component, Input, Output, ViewChild, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule } from '@angular/core';
import { MatButton, MatButtonModule } from '@angular/material/button';
import { NgIf, CommonModule } from '@angular/common';
import { MatIcon, MatIconModule } from '@angular/material/icon';
import { FormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';

class MatFileUploadService {
    constructor() { }
}
MatFileUploadService.ɵfac = function MatFileUploadService_Factory(t) { return new (t || MatFileUploadService)(); };
MatFileUploadService.ɵprov = ɵɵdefineInjectable({ token: MatFileUploadService, factory: MatFileUploadService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MatFileUploadService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

const _c0 = ["fileInput"];
function MatFileUploadComponent_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 6);
    ɵɵlistener("click", function MatFileUploadComponent_button_7_Template_button_click_0_listener() { ɵɵrestoreView(_r4); const ctx_r3 = ɵɵnextContext(); return ctx_r3.uploadFiles(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("type", ctx_r1.uploadButtonType)("disabled", !ctx_r1.selectedFiles);
    ɵɵattribute("aria-label", ctx_r1.uploadButtonText);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.uploadButtonText, " ");
} }
function MatFileUploadComponent_button_10_mat_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "mat-icon");
    ɵɵtext(1, "close");
    ɵɵelementEnd();
} }
function MatFileUploadComponent_button_10_mat_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "mat-icon", 10);
} if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("svgIcon", ctx_r6.customSvgIcon);
} }
function MatFileUploadComponent_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function MatFileUploadComponent_button_10_Template_button_click_0_listener() { ɵɵrestoreView(_r8); const ctx_r7 = ɵɵnextContext(); return ctx_r7.filesChanged(null); });
    ɵɵtemplate(1, MatFileUploadComponent_button_10_mat_icon_1_Template, 2, 0, "mat-icon", 8);
    ɵɵtemplate(2, MatFileUploadComponent_button_10_mat_icon_2_Template, 1, 1, "mat-icon", 9);
    ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r2.customSvgIcon);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.customSvgIcon);
} }
class MatFileUploadComponent {
    constructor() {
        this.labelText = 'Select File(s)';
        this.selectButtonText = 'Select File(s)';
        this.selectFilesButtonType = 'button';
        this.uploadButtonText = 'Upload File(s)';
        this.uploadButtonType = 'button';
        this.allowMultipleFiles = false;
        this.showUploadButton = true;
        this.acceptedTypes = '*.*';
        this.customSvgIcon = null;
        this.uploadClicked = new EventEmitter();
        this.selectedFilesChanged = new EventEmitter();
        this.selectedFileText = '';
    }
    filesChanged(files) {
        this.selectedFiles = files;
        this.selectedFilesChanged.emit(this.selectedFiles);
        if (this.selectedFiles) {
            const numSelectedFiles = this.selectedFiles.length;
            this.selectedFileText =
                numSelectedFiles === 1
                    ? this.selectedFiles[0].name
                    : `${numSelectedFiles} files selected`;
        }
        else {
            this.selectedFileText = '';
            this.resetFileInput();
        }
    }
    uploadFiles() {
        this.uploadClicked.emit(this.selectedFiles);
        this.resetFileInput();
    }
    resetFileInput() {
        this.fileInputRef.nativeElement.value = '';
    }
}
MatFileUploadComponent.ɵfac = function MatFileUploadComponent_Factory(t) { return new (t || MatFileUploadComponent)(); };
MatFileUploadComponent.ɵcmp = ɵɵdefineComponent({ type: MatFileUploadComponent, selectors: [["mat-file-upload"]], viewQuery: function MatFileUploadComponent_Query(rf, ctx) { if (rf & 1) {
        ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileInputRef = _t.first);
    } }, inputs: { labelText: "labelText", selectButtonText: "selectButtonText", selectFilesButtonType: "selectFilesButtonType", uploadButtonText: "uploadButtonText", uploadButtonType: "uploadButtonType", allowMultipleFiles: "allowMultipleFiles", showUploadButton: "showUploadButton", acceptedTypes: "acceptedTypes", customSvgIcon: "customSvgIcon" }, outputs: { uploadClicked: "uploadClicked", selectedFilesChanged: "selectedFilesChanged" }, decls: 11, vars: 9, consts: [[1, "file-input-text"], ["mat-button", "", "color", "primary", 1, "file-input-button", 3, "type", "click"], ["type", "file", 2, "display", "none", 3, "accept", "multiple", "change"], ["fileInput", ""], ["mat-raised-button", "", "color", "primary", "class", "file-input-button", 3, "type", "disabled", "click", 4, "ngIf"], ["mat-icon-button", "", "type", "button", "aria-label", "Remove Selected File(s)", 3, "click", 4, "ngIf"], ["mat-raised-button", "", "color", "primary", 1, "file-input-button", 3, "type", "disabled", "click"], ["mat-icon-button", "", "type", "button", "aria-label", "Remove Selected File(s)", 3, "click"], [4, "ngIf"], [3, "svgIcon", 4, "ngIf"], [3, "svgIcon"]], template: function MatFileUploadComponent_Template(rf, ctx) { if (rf & 1) {
        const _r9 = ɵɵgetCurrentView();
        ɵɵelementStart(0, "span", 0);
        ɵɵtext(1);
        ɵɵelementEnd();
        ɵɵelementStart(2, "button", 1);
        ɵɵlistener("click", function MatFileUploadComponent_Template_button_click_2_listener() { ɵɵrestoreView(_r9); const _r0 = ɵɵreference(6); return _r0.click(); });
        ɵɵelementStart(3, "span");
        ɵɵtext(4);
        ɵɵelementEnd();
        ɵɵelementStart(5, "input", 2, 3);
        ɵɵlistener("change", function MatFileUploadComponent_Template_input_change_5_listener($event) { return ctx.filesChanged($event.target.files); });
        ɵɵelementEnd();
        ɵɵelementEnd();
        ɵɵtemplate(7, MatFileUploadComponent_button_7_Template, 2, 4, "button", 4);
        ɵɵelementStart(8, "span", 0);
        ɵɵtext(9);
        ɵɵelementEnd();
        ɵɵtemplate(10, MatFileUploadComponent_button_10_Template, 3, 2, "button", 5);
    } if (rf & 2) {
        ɵɵadvance(1);
        ɵɵtextInterpolate(ctx.labelText);
        ɵɵadvance(1);
        ɵɵproperty("type", ctx.selectFilesButtonType);
        ɵɵattribute("aria-label", ctx.selectButtonText);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.selectButtonText);
        ɵɵadvance(1);
        ɵɵproperty("accept", ctx.acceptedTypes)("multiple", ctx.allowMultipleFiles);
        ɵɵadvance(2);
        ɵɵproperty("ngIf", ctx.showUploadButton);
        ɵɵadvance(2);
        ɵɵtextInterpolate(ctx.selectedFileText);
        ɵɵadvance(1);
        ɵɵproperty("ngIf", ctx.selectedFiles != null && ctx.selectedFiles.length > 0);
    } }, directives: [MatButton, NgIf, MatIcon], styles: [".file-input-button[_ngcontent-%COMP%] { margin-right: 8px !important }", ".file-input-text[_ngcontent-%COMP%] { font-size: 14px !important; margin-right: 8px !important }"] });
/*@__PURE__*/ (function () { ɵsetClassMetadata(MatFileUploadComponent, [{
        type: Component,
        args: [{
                selector: 'mat-file-upload',
                template: `
    <span class="file-input-text">{{ labelText }}</span>
    <button
      mat-button
      [type]="selectFilesButtonType"
      color="primary"
      class="file-input-button"
      (click)="fileInput.click()"
      [attr.aria-label]="selectButtonText"
    >
      <span>{{ selectButtonText }}</span>
      <input
        #fileInput
        type="file"
        style="display: none"
        [accept]="acceptedTypes"
        [multiple]="allowMultipleFiles"
        (change)="filesChanged($event.target.files)"
      />
    </button>
    <button
      mat-raised-button
      [type]="uploadButtonType"
      color="primary"
      class="file-input-button"
      [disabled]="!selectedFiles"
      (click)="uploadFiles()"
      *ngIf="showUploadButton"
      [attr.aria-label]="uploadButtonText"
    >
      {{ uploadButtonText }}
    </button>
    <span class="file-input-text">{{ selectedFileText }}</span>
    <button
      mat-icon-button
      (click)="filesChanged(null)"
      type="button"
      aria-label="Remove Selected File(s)"
       *ngIf="selectedFiles != null && selectedFiles.length > 0"
    >
        <mat-icon *ngIf="!customSvgIcon">close</mat-icon>
        <mat-icon *ngIf="customSvgIcon" [svgIcon]="customSvgIcon"></mat-icon>
    </button>
  `,
                styles: [
                    '.file-input-button { margin-right: 8px !important }',
                    '.file-input-text { font-size: 14px !important; margin-right: 8px !important }',
                ],
            }]
    }], null, { labelText: [{
            type: Input
        }], selectButtonText: [{
            type: Input
        }], selectFilesButtonType: [{
            type: Input
        }], uploadButtonText: [{
            type: Input
        }], uploadButtonType: [{
            type: Input
        }], allowMultipleFiles: [{
            type: Input
        }], showUploadButton: [{
            type: Input
        }], acceptedTypes: [{
            type: Input
        }], customSvgIcon: [{
            type: Input
        }], uploadClicked: [{
            type: Output
        }], selectedFilesChanged: [{
            type: Output
        }], fileInputRef: [{
            type: ViewChild,
            args: ['fileInput']
        }] }); })();

class MatFileUploadModule {
}
MatFileUploadModule.ɵmod = ɵɵdefineNgModule({ type: MatFileUploadModule });
MatFileUploadModule.ɵinj = ɵɵdefineInjector({ factory: function MatFileUploadModule_Factory(t) { return new (t || MatFileUploadModule)(); }, imports: [[
            CommonModule,
            MatButtonModule,
            MatIconModule,
            MatInputModule,
            MatSelectModule,
            FormsModule,
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(MatFileUploadModule, { declarations: [MatFileUploadComponent], imports: [CommonModule,
        MatButtonModule,
        MatIconModule,
        MatInputModule,
        MatSelectModule,
        FormsModule], exports: [MatFileUploadComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(MatFileUploadModule, [{
        type: NgModule,
        args: [{
                declarations: [MatFileUploadComponent],
                imports: [
                    CommonModule,
                    MatButtonModule,
                    MatIconModule,
                    MatInputModule,
                    MatSelectModule,
                    FormsModule,
                ],
                exports: [MatFileUploadComponent],
            }]
    }], null, null); })();

/*
 * Public API Surface of mat-file-upload
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MatFileUploadComponent, MatFileUploadModule, MatFileUploadService };
//# sourceMappingURL=mat-file-upload.js.map
